#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –º–µ–∂–¥—É MEXC –∏ DexScreener
–ê–≤—Ç–æ—Ä: 24vasilekk
–ü—É—Ç—å: validate_token_matching.py (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
3. –†–∞–∑—É–º–Ω–æ—Å—Ç—å —Å–ø—Ä–µ–¥–æ–≤
4. –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏

–ó–∞–ø—É—Å–∫:
python validate_token_matching.py
"""

import asyncio
import sys
import os
import json
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv
from colorama import init, Fore, Style
from typing import Dict, List, Optional, Tuple

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
VALIDATION_TOKENS = [
    "BTC/USDT", "ETH/USDT", "BNB/USDT",  # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    "PEPE/USDT", "DINO/USDT", "GOG/USDT", "ZEUS/USDT",  # –ù–æ–≤—ã–µ
    "FART/USDT", "LABUBU/USDT", "HOUSE/USDT"  # –≠–∫–∑–æ—Ç–∏—á–Ω—ã–µ
]

async def get_mexc_token_info(symbol: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ —Å MEXC"""
    try:
        from src.exchanges.mexc_client import MEXCClient
        
        mexc_client = MEXCClient()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä
        ticker = await mexc_client.get_ticker(symbol)
        if not ticker:
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
        market_info = mexc_client.exchange.markets.get(symbol, {})
        
        result = {
            'symbol': symbol,
            'price': ticker['price'],
            'bid': ticker['bid'],
            'ask': ticker['ask'],
            'exchange': 'MEXC',
            'market_info': {
                'base': market_info.get('base', ''),
                'quote': market_info.get('quote', ''),
                'active': market_info.get('active', False),
                'type': market_info.get('type', ''),
                'id': market_info.get('id', ''),
                'precision': market_info.get('precision', {}),
                'limits': market_info.get('limits', {})
            },
            'timestamp': datetime.now().isoformat()
        }
        
        mexc_client.close_connection()
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MEXC –¥–ª—è {symbol}: {e}")
        return None

async def get_dex_token_info(symbol: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ —Å DexScreener"""
    try:
        from src.exchanges.dex_client import DEXClient
        
        async with DEXClient() as dex_client:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ
            price_data = await dex_client.get_dex_price(symbol)
            if not price_data:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API
            import aiohttp
            
            base_token = symbol.split('/')[0].upper()
            url = f"https://api.dexscreener.com/latest/dex/search"
            params = {'q': base_token}
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        pairs = data.get('pairs', [])
                        
                        # –ò—â–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä—ã —Å USDT/USDC
                        best_pairs = []
                        for pair in pairs:
                            quote_symbol = pair.get('quoteToken', {}).get('symbol', '').upper()
                            base_symbol = pair.get('baseToken', {}).get('symbol', '').upper()
                            
                            if (quote_symbol in ['USDT', 'USDC'] and 
                                base_symbol == base_token):
                                best_pairs.append(pair)
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                        best_pairs.sort(key=lambda x: x.get('liquidity', {}).get('usd', 0), reverse=True)
                        
                        if best_pairs:
                            top_pair = best_pairs[0]
                            
                            return {
                                'symbol': symbol,
                                'price': price_data['price'],
                                'exchange': 'DexScreener',
                                'pair_info': {
                                    'dex_id': top_pair.get('dexId', ''),
                                    'pair_address': top_pair.get('pairAddress', ''),
                                    'base_token': {
                                        'address': top_pair.get('baseToken', {}).get('address', ''),
                                        'name': top_pair.get('baseToken', {}).get('name', ''),
                                        'symbol': top_pair.get('baseToken', {}).get('symbol', '')
                                    },
                                    'quote_token': {
                                        'address': top_pair.get('quoteToken', {}).get('address', ''),
                                        'name': top_pair.get('quoteToken', {}).get('name', ''),
                                        'symbol': top_pair.get('quoteToken', {}).get('symbol', '')
                                    },
                                    'liquidity_usd': top_pair.get('liquidity', {}).get('usd', 0),
                                    'volume_24h': top_pair.get('volume', {}).get('h24', 0),
                                    'price_change_24h': top_pair.get('priceChange', {}).get('h24', 0),
                                    'chain_id': top_pair.get('chainId', ''),
                                    'dex_name': top_pair.get('dexId', '').upper()
                                },
                                'all_pairs_count': len(best_pairs),
                                'total_liquidity': sum(p.get('liquidity', {}).get('usd', 0) for p in best_pairs[:5]),
                                'timestamp': datetime.now().isoformat()
                            }
            
            return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö DEX –¥–ª—è {symbol}: {e}")
        return None

async def validate_token_pair(symbol: str) -> Dict:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤ –º–µ–∂–¥—É MEXC –∏ DEX"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {symbol}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    mexc_info, dex_info = await asyncio.gather(
        get_mexc_token_info(symbol),
        get_dex_token_info(symbol),
        return_exceptions=True
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    if isinstance(mexc_info, Exception):
        mexc_info = None
    if isinstance(dex_info, Exception):
        dex_info = None
    
    validation_result = {
        'symbol': symbol,
        'mexc_available': mexc_info is not None,
        'dex_available': dex_info is not None,
        'both_available': mexc_info is not None and dex_info is not None,
        'mexc_info': mexc_info,
        'dex_info': dex_info,
        'validation_status': 'unknown',
        'price_comparison': {},
        'warnings': [],
        'recommendations': []
    }
    
    if not mexc_info:
        validation_result['warnings'].append(f"‚ùå {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ MEXC")
        validation_result['validation_status'] = 'mexc_missing'
        
    if not dex_info:
        validation_result['warnings'].append(f"‚ùå {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DexScreener")
        validation_result['validation_status'] = 'dex_missing'
    
    if mexc_info and dex_info:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã
        mexc_price = mexc_info['price']
        dex_price = dex_info['price']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ü–µ–Ω
        price_ratio = max(mexc_price, dex_price) / min(mexc_price, dex_price)
        spread_percent = abs(mexc_price - dex_price) / mexc_price * 100
        
        validation_result['price_comparison'] = {
            'mexc_price': mexc_price,
            'dex_price': dex_price,
            'price_ratio': price_ratio,
            'spread_percent': spread_percent,
            'reasonable_spread': spread_percent < 50  # –§–ª–∞–≥ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Å–ø—Ä–µ–¥–∞
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if price_ratio > 10:  # –¶–µ–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –≤ 10+ —Ä–∞–∑
            validation_result['validation_status'] = 'price_mismatch'
            validation_result['warnings'].append(f"üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø —Ä–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω: {price_ratio:.1f}x")
        elif spread_percent > 100:  # –°–ø—Ä–µ–¥ –±–æ–ª—å—à–µ 100%
            validation_result['validation_status'] = 'extreme_spread'
            validation_result['warnings'].append(f"‚ö†Ô∏è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô —Å–ø—Ä–µ–¥: {spread_percent:.1f}%")
        elif spread_percent > 50:  # –°–ø—Ä–µ–¥ –±–æ–ª—å—à–µ 50%
            validation_result['validation_status'] = 'high_spread'
            validation_result['warnings'].append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥: {spread_percent:.1f}%")
        else:
            validation_result['validation_status'] = 'ok'
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ä–æ–±–Ω–µ–µ
        if dex_info.get('pair_info'):
            pair_info = dex_info['pair_info']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            liquidity = pair_info.get('liquidity_usd', 0)
            if liquidity < 10000:
                validation_result['warnings'].append(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity:,.0f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            dex_name = pair_info.get('base_token', {}).get('name', '')
            dex_symbol = pair_info.get('base_token', {}).get('symbol', '')
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏
            print(f"  üìä MEXC: ${mexc_price:.8f}")
            print(f"  üìä DEX:  ${dex_price:.8f} ({dex_name} –Ω–∞ {pair_info.get('dex_name', 'Unknown')})")
            print(f"  üìà –°–ø—Ä–µ–¥: {spread_percent:.2f}%")
            print(f"  üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity:,.0f}")
            
            if validation_result['validation_status'] == 'ok':
                print(f"  ‚úÖ –¢–æ–∫–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
            else:
                for warning in validation_result['warnings']:
                    print(f"  {warning}")
    
    return validation_result

async def generate_validation_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print(f"{Fore.CYAN}üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –¢–û–ö–ï–ù–û–í MEXC vs DEX")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    if not os.getenv('MEXC_API_KEY'):
        print(f"{Fore.RED}‚ùå MEXC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ{Style.RESET_ALL}")
        return
    
    validation_results = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
    for symbol in VALIDATION_TOKENS:
        result = await validate_token_pair(symbol)
        validation_results.append(result)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(1)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n{Fore.CYAN}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print("=" * 60)
    
    ok_tokens = []
    problematic_tokens = []
    missing_tokens = []
    
    for result in validation_results:
        symbol = result['symbol']
        status = result['validation_status']
        
        if status == 'ok':
            ok_tokens.append(result)
            print(f"‚úÖ {symbol:<12} - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω")
        elif status in ['mexc_missing', 'dex_missing']:
            missing_tokens.append(result)
            print(f"‚ùå {symbol:<12} - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        else:
            problematic_tokens.append(result)
            status_text = {
                'price_mismatch': '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ —Ü–µ–Ω',
                'extreme_spread': '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥',  
                'high_spread': '–í—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥'
            }.get(status, '–ü—Ä–æ–±–ª–µ–º—ã')
            print(f"‚ö†Ô∏è  {symbol:<12} - {status_text}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report_data = {
        'timestamp': datetime.now().isoformat(),
        'summary': {
            'total_checked': len(validation_results),
            'ok_tokens': len(ok_tokens),
            'problematic_tokens': len(problematic_tokens),
            'missing_tokens': len(missing_tokens)
        },
        'validation_results': validation_results
    }
    
    reports_dir = Path("logs/validation")
    reports_dir.mkdir(parents=True, exist_ok=True)
    
    report_file = reports_dir / f"token_validation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\n{Fore.GREEN}üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}{Style.RESET_ALL}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\n{Fore.YELLOW}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    
    if ok_tokens:
        print(f"{Fore.GREEN}‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ï —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ ({len(ok_tokens)} —à—Ç.):{Style.RESET_ALL}")
        for result in ok_tokens:
            symbol = result['symbol']
            spread = result['price_comparison'].get('spread_percent', 0)
            print(f"   {symbol} (—Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {spread:.2f}%)")
    
    if problematic_tokens:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï —Ç–æ–∫–µ–Ω—ã - —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è ({len(problematic_tokens)} —à—Ç.):{Style.RESET_ALL}")
        for result in problematic_tokens:
            symbol = result['symbol']
            warnings = result.get('warnings', [])
            print(f"   {symbol}:")
            for warning in warnings:
                print(f"     {warning}")
    
    if missing_tokens:
        print(f"\n{Fore.RED}‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï —Ç–æ–∫–µ–Ω—ã - –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏ ({len(missing_tokens)} —à—Ç.):{Style.RESET_ALL}")
        for result in missing_tokens:
            symbol = result['symbol']
            print(f"   {symbol}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    safe_percentage = len(ok_tokens) / len(validation_results) * 100
    
    print(f"\n{Fore.CYAN}üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print(f"–ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {safe_percentage:.1f}%")
    
    if safe_percentage >= 80:
        print(f"{Fore.GREEN}üü¢ –û–¢–õ–ò–ß–ù–û - –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞{Style.RESET_ALL}")
    elif safe_percentage >= 60:
        print(f"{Fore.YELLOW}üü° –ü–†–ò–ï–ú–õ–ï–ú–û - –Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ{Style.RESET_ALL}")
    else:
        print(f"{Fore.RED}üî¥ –û–ü–ê–°–ù–û - –º–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤{Style.RESET_ALL}")
    
    return validation_results

async def quick_price_comparison(symbols: List[str] = None):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    if not symbols:
        symbols = ["BTC/USDT", "ETH/USDT", "PEPE/USDT"]
    
    print(f"\n{Fore.CYAN}‚ö° –ë–´–°–¢–†–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –¶–ï–ù (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏):{Style.RESET_ALL}")
    print("=" * 70)
    print(f"{'–¢–æ–∫–µ–Ω':<12} {'MEXC –¶–µ–Ω–∞':<15} {'DEX –¶–µ–Ω–∞':<15} {'–°–ø—Ä–µ–¥':<10} {'–°—Ç–∞—Ç—É—Å'}")
    print("-" * 70)
    
    for symbol in symbols:
        try:
            # –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
            mexc_info, dex_info = await asyncio.gather(
                get_mexc_token_info(symbol),
                get_dex_token_info(symbol),
                return_exceptions=True
            )
            
            if (not isinstance(mexc_info, Exception) and mexc_info and 
                not isinstance(dex_info, Exception) and dex_info):
                
                mexc_price = mexc_info['price']
                dex_price = dex_info['price']
                spread = abs(mexc_price - dex_price) / mexc_price * 100
                
                status = "‚úÖ –û–ö" if spread < 20 else "‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π" if spread < 50 else "üö® –ö—Ä–∏—Ç–∏—á"
                
                print(f"{symbol:<12} ${mexc_price:<14.6f} ${dex_price:<14.6f} {spread:<9.2f}% {status}")
            else:
                print(f"{symbol:<12} {'‚ùå –û—à–∏–±–∫–∞':<30}")
                
        except Exception as e:
            print(f"{symbol:<12} {'‚ùå –û—à–∏–±–∫–∞':<30}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    try:
        print(f"{Fore.CYAN}üõ°Ô∏è –ò–ù–°–¢–†–£–ú–ï–ù–¢ –ü–†–û–í–ï–†–ö–ò –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –¢–û–ö–ï–ù–û–í")
        print("–ê–≤—Ç–æ—Ä: 24vasilekk")
        print("=" * 60)
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
        await quick_price_comparison(["BTC/USDT", "ETH/USDT", "PEPE/USDT", "DINO/USDT"])
        
        print(f"\n{Fore.YELLOW}–ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é...{Style.RESET_ALL}")
        
        # –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        results = await generate_validation_report()
        
        print(f"\n{Fore.GREEN}‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä{Style.RESET_ALL}")
        
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚èπÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}{Style.RESET_ALL}")

if __name__ == "__main__":
    asyncio.run(main())