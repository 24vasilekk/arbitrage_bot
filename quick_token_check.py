#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
–ê–≤—Ç–æ—Ä: 24vasilekk
–ü—É—Ç—å: quick_token_check.py (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python quick_token_check.py PEPE/USDT
python quick_token_check.py "BTC/USDT,ETH/USDT,PEPE/USDT"
python quick_token_check.py --live  # –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import sys
import os
import argparse
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def check_single_token(symbol: str, detailed: bool = False):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {symbol}...")
    
    try:
        from src.exchanges.mexc_client import MEXCClient
        from src.exchanges.dex_client import DEXClient
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        mexc_client = MEXCClient()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        mexc_task = mexc_client.get_ticker(symbol)
        
        async with DEXClient() as dex_client:
            dex_task = dex_client.get_dex_price(symbol)
            
            mexc_data, dex_data = await asyncio.gather(
                mexc_task, dex_task, return_exceptions=True
            )
        
        mexc_client.close_connection()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        mexc_ok = not isinstance(mexc_data, Exception) and mexc_data is not None
        dex_ok = not isinstance(dex_data, Exception) and dex_data is not None
        
        print(f"  üìä MEXC: ", end="")
        if mexc_ok:
            mexc_price = mexc_data['price']
            print(f"{Fore.GREEN}‚úÖ ${mexc_price:.8f}{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω{Style.RESET_ALL}")
            if isinstance(mexc_data, Exception):
                print(f"     –û—à–∏–±–∫–∞: {mexc_data}")
        
        print(f"  üìä DEX:  ", end="")
        if dex_ok:
            dex_price = dex_data['price']
            sources = len(dex_data.get('sources', []))
            print(f"{Fore.GREEN}‚úÖ ${dex_price:.8f} ({sources} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤){Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω{Style.RESET_ALL}")
            if isinstance(dex_data, Exception):
                print(f"     –û—à–∏–±–∫–∞: {dex_data}")
        
        if mexc_ok and dex_ok:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–µ–Ω—ã
            spread = abs(mexc_price - dex_price) / mexc_price * 100
            ratio = max(mexc_price, dex_price) / min(mexc_price, dex_price)
            
            print(f"  üìà –°–ø—Ä–µ–¥: {spread:.2f}%")
            print(f"  üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω: {ratio:.2f}x")
            
            # –û—Ü–µ–Ω–∫–∞
            if ratio > 10:
                print(f"  üö® {Fore.RED}–ö–†–ò–¢–ò–ß–ù–û: –¶–µ–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –≤ {ratio:.1f} —Ä–∞–∑!{Style.RESET_ALL}")
                print(f"     ‚ùì –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –†–ê–ó–ù–´–ï —Ç–æ–∫–µ–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º")
            elif spread > 100:
                print(f"  ‚ö†Ô∏è  {Fore.YELLOW}–í–ù–ò–ú–ê–ù–ò–ï: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥ {spread:.1f}%{Style.RESET_ALL}")
            elif spread > 50:
                print(f"  ‚ö†Ô∏è  {Fore.YELLOW}–í—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥ {spread:.1f}%{Style.RESET_ALL}")
            elif spread > 7.5:
                print(f"  üéØ {Fore.GREEN}–ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨: {spread:.1f}%{Style.RESET_ALL}")
            else:
                print(f"  ‚úÖ {Fore.GREEN}–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {spread:.1f}%{Style.RESET_ALL}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if detailed and dex_ok:
                print(f"\n  üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è DEX:")
                if 'sources' in dex_data:
                    print(f"     –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(dex_data['sources'])}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                try:
                    import aiohttp
                    base_token = symbol.split('/')[0].upper()
                    
                    async with aiohttp.ClientSession() as session:
                        async with session.get(
                            f"https://api.dexscreener.com/latest/dex/search?q={base_token}"
                        ) as response:
                            if response.status == 200:
                                data = await response.json()
                                pairs = data.get('pairs', [])
                                
                                if pairs:
                                    best_pair = pairs[0]
                                    token_info = best_pair.get('baseToken', {})
                                    
                                    print(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: {token_info.get('name', 'N/A')}")
                                    print(f"     –ê–¥—Ä–µ—Å: {token_info.get('address', 'N/A')[:10]}...")
                                    print(f"     –°–µ—Ç—å: {best_pair.get('chainId', 'N/A')}")
                                    print(f"     DEX: {best_pair.get('dexId', 'N/A')}")
                                    
                                    liquidity = best_pair.get('liquidity', {}).get('usd', 0)
                                    if liquidity:
                                        print(f"     –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity:,.0f}")
                except:
                    pass
            
            return {
                'symbol': symbol,
                'mexc_price': mexc_price,
                'dex_price': dex_price,
                'spread': spread,
                'ratio': ratio,
                'status': 'ok' if ratio < 2 and spread < 50 else 'warning' if ratio < 10 else 'critical'
            }
        else:
            return {
                'symbol': symbol,
                'status': 'error',
                'mexc_available': mexc_ok,
                'dex_available': dex_ok
            }
            
    except Exception as e:
        print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {'symbol': symbol, 'status': 'error', 'error': str(e)}

async def live_monitoring(symbols: list, interval: int = 5):
    """–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print(f"{Fore.CYAN}‚ö° –†–ï–ñ–ò–ú –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò")
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    print("=" * 80)
    
    try:
        while True:
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (–¥–ª—è Unix/Linux/Mac)
            if os.name == 'posix':
                os.system('clear')
            
            print(f"{Fore.CYAN}üïê {datetime.now().strftime('%H:%M:%S')} - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤:{Style.RESET_ALL}")
            print("=" * 80)
            print(f"{'–¢–æ–∫–µ–Ω':<12} {'MEXC':<15} {'DEX':<15} {'–°–ø—Ä–µ–¥':<8} {'–°—Ç–∞—Ç—É—Å'}")
            print("-" * 80)
            
            results = []
            for symbol in symbols:
                try:
                    result = await check_single_token(symbol, detailed=False)
                    results.append(result)
                    
                    if result.get('status') == 'ok':
                        mexc_price = result['mexc_price']
                        dex_price = result['dex_price']
                        spread = result['spread']
                        
                        status_color = Fore.GREEN if spread < 20 else Fore.YELLOW if spread < 50 else Fore.RED
                        status_text = "–û–ö" if spread < 20 else "–í—ã—Å–æ–∫–∏–π" if spread < 50 else "–ö—Ä–∏—Ç–∏—á"
                        
                        print(f"{symbol:<12} ${mexc_price:<14.6f} ${dex_price:<14.6f} {spread:<7.2f}% {status_color}{status_text}{Style.RESET_ALL}")
                    else:
                        print(f"{symbol:<12} {'‚ùå –û—à–∏–±–∫–∞':<40}")
                        
                except Exception as e:
                    print(f"{symbol:<12} {'‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ':<40}")
            
            # –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            opportunities = [r for r in results if r.get('status') == 'ok' and r.get('spread', 0) > 7.5]
            
            if opportunities:
                print(f"\n{Fore.GREEN}üéØ –ù–ê–ô–î–ï–ù–´ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
                for opp in opportunities:
                    direction = "LONG MEXC" if opp['mexc_price'] < opp['dex_price'] else "SHORT MEXC"
                    print(f"   {opp['symbol']}: {opp['spread']:.2f}% ({direction})")
            
            print(f"\n‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
            
            await asyncio.sleep(interval)
            
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Style.RESET_ALL}")

def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–æ–≤')
    parser.add_argument('symbols', nargs='?', 
                       help='–¢–æ–∫–µ–Ω –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC/USDT –∏–ª–∏ "BTC/USDT,ETH/USDT")')
    parser.add_argument('--live', action='store_true',
                       help='–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')
    parser.add_argument('--detailed', '-d', action='store_true',
                       help='–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö')
    parser.add_argument('--interval', '-i', type=int, default=5,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ live —Ä–µ–∂–∏–º–µ (—Å–µ–∫)')
    
    return parser.parse_args()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    if not os.getenv('MEXC_API_KEY'):
        print(f"{Fore.RED}‚ùå MEXC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ{Style.RESET_ALL}")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏")
        return
    
    print(f"{Fore.CYAN}üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–û–í")
    print("–ê–≤—Ç–æ—Ä: 24vasilekk")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if args.symbols:
        if ',' in args.symbols:
            symbols = [s.strip() for s in args.symbols.split(',')]
        else:
            symbols = [args.symbols.strip()]
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
        symbols = ['BTC/USDT', 'ETH/USDT', 'PEPE/USDT', 'DINO/USDT']
        print("–¢–æ–∫–µ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
        print(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python {sys.argv[0]} \"BTC/USDT,ETH/USDT\" –¥–ª—è —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞")
    
    if args.live:
        # –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await live_monitoring(symbols, args.interval)
    else:
        # –†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        for symbol in symbols:
            await check_single_token(symbol, detailed=args.detailed)
        
        print(f"\n{Fore.GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"\n{Fore.CYAN}üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print(f"   python {sys.argv[0]} --live                    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print(f"   python {sys.argv[0]} PEPE/USDT --detailed      # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        print(f"   python validate_token_matching.py             # –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è{Style.RESET_ALL}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")