#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: 24vasilekk
–ü—É—Ç—å: check_new_tokens.py (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)

–ó–∞–ø—É—Å–∫:
python check_new_tokens.py
"""

import asyncio
import sys
import os
import json
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
NEW_TOKENS = [
    "DIS/USDT", "UPTOP/USDT", "IRIS/USDT", "DUPE/USDT", "TAG/USDT",
    "STARTUP/USDT", "GOG/USDT", "TGT/USDT", "AURASOL/USDT", "DINO/USDT",
    "ALTCOIN/USDT", "PEPE/USDT", "ECHO/USDT", "MANYU/USDT", 
    "APETH/USDT", "LABUBU/USDT", "FART/USDT", "ELDE/USDT", "GP/USDT",
    "HOUSE/USDT", "ZEUS/USDT", "BR/USDT", "VSN/USDT", "RION/USDT", "DEVVE/USDT"
]

# –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
STABLE_TOKENS = [
    "BTC/USDT", "ETH/USDT", "BNB/USDT", "SOL/USDT", "ADA/USDT",
    "XRP/USDT", "DOGE/USDT", "AVAX/USDT", "LINK/USDT", "MATIC/USDT",
    "UNI/USDT", "LTC/USDT", "ATOM/USDT", "NEAR/USDT", "SHIB/USDT"
]

async def check_mexc_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ MEXC"""
    print(f"{Fore.YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ MEXC...{Style.RESET_ALL}")
    
    try:
        from src.exchanges.mexc_client import MEXCClient
        
        mexc_client = MEXCClient()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤ MEXC
        markets = mexc_client.exchange.markets
        available_markets = list(markets.keys())
        
        print(f"{Fore.GREEN}‚úÖ MEXC –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ —Ä—ã–Ω–∫–æ–≤: {len(available_markets)}{Style.RESET_ALL}")
        
        available_tokens = []
        missing_tokens = []
        
        all_tokens = NEW_TOKENS + STABLE_TOKENS
        
        for token in all_tokens:
            if token in markets:
                available_tokens.append(token)
                market_info = markets[token]
                min_amount = market_info.get('limits', {}).get('amount', {}).get('min', 'N/A')
                print(f"  {Fore.GREEN}‚úÖ{Style.RESET_ALL} {token:<15} - –¥–æ—Å—Ç—É–ø–µ–Ω (–º–∏–Ω. —Ä–∞–∑–º–µ—Ä: {min_amount})")
            else:
                missing_tokens.append(token)
                print(f"  {Fore.RED}‚ùå{Style.RESET_ALL} {token:<15} - –ù–ï –Ω–∞–π–¥–µ–Ω")
                
                # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
                base_name = token.split('/')[0].lower()
                similar = [market for market in available_markets 
                          if base_name in market.lower()]
                if similar:
                    print(f"     {Fore.CYAN}üí° –ü–æ—Ö–æ–∂–∏–µ: {', '.join(similar[:3])}{Style.RESET_ALL}")
        
        print(f"\n{Fore.CYAN}üìä MEXC –ò—Ç–æ–≥–æ: {len(available_tokens)}/{len(all_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã{Style.RESET_ALL}")
        
        if missing_tokens:
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã –ù–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞ MEXC ({len(missing_tokens)}):{Style.RESET_ALL}")
            for i, token in enumerate(missing_tokens, 1):
                print(f"   {i:2d}. {token}")
        
        mexc_client.close_connection()
        return available_tokens
        
    except ImportError as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MEXC –∫–ª–∏–µ–Ω—Ç–∞: {e}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ{Style.RESET_ALL}")
        return []
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ MEXC: {e}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ{Style.RESET_ALL}")
        return []

async def check_dex_prices():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ü–µ–Ω —á–µ—Ä–µ–∑ DEX –∏—Å—Ç–æ—á–Ω–∏–∫–∏"""
    print(f"\n{Fore.YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω —á–µ—Ä–µ–∑ DEX –∏—Å—Ç–æ—á–Ω–∏–∫–∏...{Style.RESET_ALL}")
    
    try:
        from src.exchanges.dex_client import DEXClient
        
        successful = []
        failed = []
        price_info = {}
        
        async with DEXClient() as dex_client:
            all_tokens = NEW_TOKENS + STABLE_TOKENS
            
            for i, token in enumerate(all_tokens, 1):
                print(f"  üîÑ {i:2d}/{len(all_tokens)} –ü—Ä–æ–≤–µ—Ä—è–µ–º {token}...", end="")
                
                try:
                    price_data = await dex_client.get_dex_price(token)
                    
                    if price_data and price_data.get('price', 0) > 0:
                        price = price_data['price']
                        sources = price_data.get('sources', [])
                        source_count = len(sources)
                        
                        price_info[token] = {
                            'price': price,
                            'sources': sources,
                            'source_count': source_count
                        }
                        
                        print(f" {Fore.GREEN}‚úÖ ${price:.6f} ({source_count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤){Style.RESET_ALL}")
                        successful.append(token)
                    else:
                        print(f" {Fore.RED}‚ùå —Ü–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞{Style.RESET_ALL}")
                        failed.append(token)
                        
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å rate limit
                    if i % 5 == 0:
                        await asyncio.sleep(2)
                    else:
                        await asyncio.sleep(0.5)
                        
                except Exception as e:
                    print(f" {Fore.RED}‚ùå –æ—à–∏–±–∫–∞: {str(e)[:50]}...{Style.RESET_ALL}")
                    failed.append(token)
        
        print(f"\n{Fore.CYAN}üìä DEX –ò—Ç–æ–≥–æ: {len(successful)}/{len(all_tokens)} —Ç–æ–∫–µ–Ω–æ–≤{Style.RESET_ALL}")
        
        if failed:
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã –ë–ï–ó DEX —Ü–µ–Ω ({len(failed)}):{Style.RESET_ALL}")
            for i, token in enumerate(failed, 1):
                print(f"   {i:2d}. {token}")
        
        return successful, price_info
        
    except ImportError as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DEX –∫–ª–∏–µ–Ω—Ç–∞: {e}{Style.RESET_ALL}")
        return [], {}
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DEX: {e}{Style.RESET_ALL}")
        return [], {}

def generate_working_config(mexc_available, dex_available, price_info):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏"""
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
    working_new_tokens = list(set(mexc_available) & set(dex_available) & set(NEW_TOKENS))
    working_stable_tokens = list(set(mexc_available) & set(dex_available) & set(STABLE_TOKENS))
    
    print(f"\n{Fore.GREEN}‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏—Ö –ù–û–í–´–• —Ç–æ–∫–µ–Ω–æ–≤: {len(working_new_tokens)}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏—Ö –°–¢–ê–ë–ò–õ–¨–ù–´–• —Ç–æ–∫–µ–Ω–æ–≤: {len(working_stable_tokens)}{Style.RESET_ALL}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    working_new_tokens_sorted = sorted(working_new_tokens, 
        key=lambda x: price_info.get(x, {}).get('source_count', 0), 
        reverse=True)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–∞–±–æ—á–∏–µ —Ç–æ–∫–µ–Ω—ã
    all_working_tokens = working_new_tokens_sorted + working_stable_tokens
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 40 —Ç–æ–∫–µ–Ω–æ–≤
    final_tokens = all_working_tokens[:40]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    config_content = f'''# –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
# –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {timestamp}
# –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(working_new_tokens)} –Ω–æ–≤—ã—Ö + {len(working_stable_tokens)} —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

trading:
  # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ù–ï –ò–ó–ú–ï–ù–Ø–ô–¢–ï –ë–ï–ó –ü–û–ù–ò–ú–ê–ù–ò–Ø!)
  min_spread_percent: 7.5
  target_spread_percent: 1.5
  max_position_size: 100
  test_mode: true  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è –Ω–∞—á–∞–ª–∞!
  
  # –ü–†–û–í–ï–†–ï–ù–ù–´–ï –¢–û–ö–ï–ù–´ ({len(final_tokens)} —à—Ç.)
  symbols:
'''
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—á–µ—Å—Ç–≤–µ
    if working_new_tokens_sorted:
        config_content += f'    # –ù–û–í–´–ï –¢–û–ö–ï–ù–´ ({len(working_new_tokens_sorted)} —à—Ç.) - –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –¥–∞–Ω–Ω—ã—Ö\n'
        for token in working_new_tokens_sorted:
            sources = price_info.get(token, {}).get('source_count', 0)
            price = price_info.get(token, {}).get('price', 0)
            config_content += f'    - "{token}"  # ${price:.6f}, –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sources}\n'
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    if working_stable_tokens:
        config_content += f'\n    # –°–¢–ê–ë–ò–õ–¨–ù–´–ï –¢–û–ö–ï–ù–´ ({len(working_stable_tokens)} —à—Ç.)\n'
        for token in working_stable_tokens:
            price = price_info.get(token, {}).get('price', 0)
            config_content += f'    - "{token}"  # ${price:.2f}\n'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    config_dir = Path("config")
    config_dir.mkdir(exist_ok=True)
    
    config_file = config_dir / "working_tokens.yaml"
    
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        print(f"\n{Fore.GREEN}üíæ –†–∞–±–æ—á–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_file}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}üìã –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {len(final_tokens)}{Style.RESET_ALL}")
        
        return final_tokens, str(config_file)
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}{Style.RESET_ALL}")
        return final_tokens, None

def save_check_report(mexc_available, dex_available, price_info, working_tokens):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        reports_dir = Path("logs/reports")
        reports_dir.mkdir(parents=True, exist_ok=True)
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'mexc_available': len(mexc_available),
                'dex_available': len(dex_available),
                'working_tokens': len(working_tokens),
                'total_checked': len(NEW_TOKENS) + len(STABLE_TOKENS)
            },
            'mexc_tokens': mexc_available,
            'dex_tokens': dex_available,
            'working_tokens': working_tokens,
            'price_info': price_info,
            'new_tokens_checked': NEW_TOKENS,
            'stable_tokens_checked': STABLE_TOKENS
        }
        
        report_file = reports_dir / f"token_check_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"{Fore.GREEN}üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}{Style.RESET_ALL}")
        
    except Exception as e:
        print(f"{Fore.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}{Style.RESET_ALL}")

def print_recommendations(working_tokens, config_file):
    """–í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print(f"\n{Fore.CYAN}=" * 60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 60)
    
    working_new = [t for t in working_tokens if t in NEW_TOKENS]
    working_stable = [t for t in working_tokens if t in STABLE_TOKENS]
    
    print(f"{Fore.GREEN}‚úÖ –ù–æ–≤—ã—Ö —Ä–∞–±–æ—á–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(working_new)}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: {len(working_stable)}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}üéâ –í—Å–µ–≥–æ –≥–æ—Ç–æ–≤—ã—Ö –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ: {len(working_tokens)}{Style.RESET_ALL}")
    
    if len(working_tokens) >= 10:
        status_emoji = "üü¢"
        status_text = "–û–¢–õ–ò–ß–ù–û - –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞"
    elif len(working_tokens) >= 5:
        status_emoji = "üü°"
        status_text = "–ù–ï–ü–õ–û–•–û - –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"
    else:
        status_emoji = "üî¥"
        status_text = "–ú–ê–õ–û —Ç–æ–∫–µ–Ω–æ–≤ - –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏"
    
    print(f"\n{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}")
    
    print(f"\n{Fore.YELLOW}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£:{Style.RESET_ALL}")
    
    if config_file:
        print("1. üìù –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ:")
        print(f"   cp {config_file} config/settings.yaml")
    
    print("\n2. üß™ –ù–ê–ß–ù–ò–¢–ï –° –¢–ï–°–¢–û–í–û–ì–û –†–ï–ñ–ò–ú–ê:")
    if len(working_tokens) >= 5:
        sample_tokens = working_tokens[:5]
        print(f"   python run.py --test-mode --symbols \"{','.join(sample_tokens)}\"")
    
    print("\n3. ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å: TEST_MODE=true –≤ .env")
    print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: MAX_POSITION_SIZE=10-50 –¥–ª—è –Ω–∞—á–∞–ª–∞")
    print("   - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫")
    
    print("\n4. üöÄ –ü–ï–†–ï–•–û–î –ö –ë–û–ï–í–û–ú–£ –†–ï–ñ–ò–ú–£ (–¢–û–õ–¨–ö–û –ü–û–°–õ–ï –¢–ï–°–¢–û–í):")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ 24+ —á–∞—Å–∞")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã!")
    
    if working_new:
        print(f"\n{Fore.CYAN}üÜï –õ–£–ß–®–ò–ï –ù–û–í–´–ï –¢–û–ö–ï–ù–´ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:{Style.RESET_ALL}")
        for i, token in enumerate(working_new[:5], 1):
            print(f"   {i}. {token}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print(f"{Fore.CYAN}üöÄ –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –¢–û–ö–ï–ù–û–í –î–õ–Ø –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    print("–ê–≤—Ç–æ—Ä: 24vasilekk")
    print("Email: 24vasilekk@gmail.com")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv('MEXC_API_KEY'):
        print(f"{Fore.RED}‚ùå MEXC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}üîß –°–æ–∑–¥–∞–π—Ç–µ .env –∏–∑ .env.example –∏ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏{Style.RESET_ALL}")
        return
    
    if not os.getenv('MEXC_SECRET'):
        print(f"{Fore.RED}‚ùå MEXC_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ{Style.RESET_ALL}")
        return
    
    print(f"{Fore.GREEN}‚úÖ API –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã{Style.RESET_ALL}")
    
    start_time = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MEXC
    mexc_available = await check_mexc_availability()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DEX –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    dex_available, price_info = await check_dex_prices()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    working_tokens = list(set(mexc_available) & set(dex_available))
    config_file = None
    
    if working_tokens:
        working_tokens, config_file = generate_working_config(
            mexc_available, dex_available, price_info)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    save_check_report(mexc_available, dex_available, price_info, working_tokens)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print_recommendations(working_tokens, config_file)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    end_time = datetime.now()
    duration = end_time - start_time
    
    print(f"\n{Fore.CYAN}‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {duration.total_seconds():.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(NEW_TOKENS + STABLE_TOKENS)}")
    print(f"üéØ –ì–æ—Ç–æ–≤—ã—Ö –∫ —Ä–∞–±–æ—Ç–µ: {len(working_tokens)}")
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Style.RESET_ALL}")
    
    print(f"\n{Fore.GREEN}‚ñ∂Ô∏è  –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì - –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:{Style.RESET_ALL}")
    if working_tokens:
        test_tokens = working_tokens[:3]  # –ë–µ—Ä–µ–º —Ç–æ–ø-3 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"python run.py --test-mode --symbols \"{','.join(test_tokens)}\"")
    
    print(f"{Style.RESET_ALL}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚èπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install -r requirements.txt{Style.RESET_ALL}")