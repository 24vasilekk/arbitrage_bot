#!/usr/bin/env python3
"""
–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –º–µ–∂–¥—É MEXC Futures –∏ DEX –±–∏—Ä–∂–∞–º–∏
–ê–≤—Ç–æ—Ä: 24vasilekk
Email: 24vasilekk@gmail.com

–ó–∞–ø—É—Å–∫:
python run.py --test-mode
python run.py --test-mode --symbols "BTC/USDT,ETH/USDT"
"""

import argparse
import asyncio
import sys
import os
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def parse_args():
    parser = argparse.ArgumentParser(description='–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç MEXC vs DEX')
    parser.add_argument('--test-mode', action='store_true', 
                       help='–ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫)')
    parser.add_argument('--symbols', 
                       help='–°–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC/USDT,ETH/USDT)')
    parser.add_argument('--log-level', default='INFO',
                       choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'])
    return parser.parse_args()

async def main():
    args = parse_args()
    
    print("üöÄ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç MEXC vs DEX")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    if not os.getenv('MEXC_API_KEY'):
        print("‚ùå –û–®–ò–ë–ö–ê: MEXC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏–∑ .env.example –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏")
        return
        
    if not os.getenv('MEXC_SECRET'):
        print("‚ùå –û–®–ò–ë–ö–ê: MEXC_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if args.test_mode or os.getenv('TEST_MODE', 'true').lower() == 'true':
        print("üìã –†–µ–∂–∏–º: –¢–ï–°–¢–û–í–´–ô (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫)")
    else:
        print("‚ö†Ô∏è  –†–µ–∂–∏–º: –ü–†–û–î–ê–ö–®–ù (—Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏!)")
        confirmation = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (–≤–≤–µ–¥–∏—Ç–µ 'YES'): ")
        if confirmation != 'YES':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
    
    # –°–∏–º–≤–æ–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if args.symbols:
        symbols = [s.strip() for s in args.symbols.split(',')]
        print(f"üìà –°–∏–º–≤–æ–ª—ã: {symbols}")
    else:
        symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        print(f"üìà –°–∏–º–≤–æ–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {symbols}")
    
    print("‚úÖ API –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã")
    print("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    try:
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        # –ü–æ–∑–∂–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        from test_connections import test_all_connections
        await test_all_connections()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        # from src.main import ArbitrageBot
        # bot = ArbitrageBot(symbols=symbols, test_mode=args.test_mode)
        # await bot.start()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
    os.makedirs('logs', exist_ok=True)
    os.makedirs('data', exist_ok=True)
    os.makedirs('src/exchanges', exist_ok=True)
    os.makedirs('src/utils', exist_ok=True)
    os.makedirs('config', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())