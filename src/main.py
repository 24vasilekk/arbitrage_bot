"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞ MEXC vs DEX
–ê–≤—Ç–æ—Ä: 24vasilekk (24vasilekk@gmail.com)
"""

import asyncio
import signal
import sys
from typing import List, Optional
from datetime import datetime

from .config import config
from .strategies.arbitrage_strategy import ArbitrageStrategy
from .utils.logger import get_logger, get_trade_logger

class ArbitrageBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, symbols: Optional[List[str]] = None, test_mode: Optional[bool] = None):
        self.logger = get_logger("arbitrage_bot")
        self.trade_logger = get_trade_logger("arbitrage_bot")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        self.symbols = symbols or config.symbols
        self.test_mode = test_mode if test_mode is not None else config.test_mode
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è
        self.strategy = ArbitrageStrategy()
        
        # –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.running = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
        
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        def signal_handler(signum, frame):
            self.logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.running = False
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞ MEXC vs DEX")
        self.logger.info("=" * 60)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not config.validate():
            self.logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            return
        
        # –í—ã–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await self._print_settings()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if not await self._test_connections():
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–∞–º")
            return
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        self.running = True
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            await self.strategy.start()
            
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
        finally:
            self.running = False
            await self._shutdown()
    
    async def _print_settings(self):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
        mode = "üß™ –¢–ï–°–¢–û–í–´–ô" if self.test_mode else "‚ö†Ô∏è –ü–†–û–î–ê–ö–®–ù"
        
        self.logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:")
        self.logger.info(f"   –†–µ–∂–∏–º: {mode}")
        self.logger.info(f"   –°–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(self.symbols)}")
        self.logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {config.min_spread_percent}%")
        self.logger.info(f"   –¶–µ–ª–µ–≤–æ–π —Å–ø—Ä–µ–¥: {config.target_spread_percent}%")
        self.logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${config.max_position_size}")
        self.logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: ${config.max_daily_loss}")
        self.logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {config.price_update_interval}—Å")
        
        if len(self.symbols) <= 10:
            self.logger.info(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(self.symbols)}")
        else:
            self.logger.info(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(self.symbols[:10])}... –∏ –µ—â–µ {len(self.symbols)-10}")
    
    async def _test_connections(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º"""
        self.logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        try:
            # –¢–µ—Å—Ç MEXC
            mexc_balance = await self.strategy.mexc_client.get_balance()
            if mexc_balance:
                usdt_balance = mexc_balance.get('USDT', {}).get('total', 0)
                self.logger.info(f"‚úÖ MEXC –ø–æ–¥–∫–ª—é—á–µ–Ω | –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MEXC")
                return False
            
            # –¢–µ—Å—Ç DEX –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            await self.strategy.dex_client.__aenter__()
            test_price = await self.strategy.dex_client.get_dex_price('BTC/USDT')
            
            if test_price:
                self.logger.info(f"‚úÖ DEX –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã | BTC: ${test_price['price']:.2f}")
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ DEX –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
            return False
    
    async def _shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        self.logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            status = self.strategy.get_status()
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            self.logger.info("=" * 50)
            self.logger.info(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {status['total_trades']}")
            self.logger.info(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {status['winning_trades']}")
            self.logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏: {status['win_rate']:.1f}%")
            self.logger.info(f"   –û–±—â–∏–π PnL: ${status['total_pnl']:.2f}")
            self.logger.info(f"   PnL –∑–∞ –¥–µ–Ω—å: ${status['daily_pnl']:.2f}")
            self.logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {status['active_positions']}")
            self.logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {status['opportunities_found']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
            await self._save_session_stats(status)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        
        self.logger.info("‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def _save_session_stats(self, status: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            from pathlib import Path
            import json
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_dir = Path("logs/stats")
            stats_dir.mkdir(exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_data = {
                'timestamp': datetime.now().isoformat(),
                'test_mode': self.test_mode,
                'symbols': self.symbols,
                'config': {
                    'min_spread': config.min_spread_percent,
                    'target_spread': config.target_spread_percent,
                    'max_position_size': config.max_position_size,
                    'max_daily_loss': config.max_daily_loss
                },
                'statistics': status,
                'opportunities_count': len(self.strategy.opportunities_history)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            session_file = stats_dir / f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(session_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {session_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        base_status = {
            'running': self.running,
            'test_mode': self.test_mode,
            'symbols_count': len(self.symbols),
            'start_time': datetime.now().isoformat()
        }
        
        if hasattr(self, 'strategy'):
            strategy_status = self.strategy.get_status()
            base_status.update(strategy_status)
        
        return base_status
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞")
        self.running = False

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = ArbitrageBot()
    await bot.start()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
    asyncio.run(main())