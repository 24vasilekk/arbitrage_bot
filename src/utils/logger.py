"""
–ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞
–ê–≤—Ç–æ—Ä: 24vasilekk
"""

import logging
import os
from datetime import datetime
from pathlib import Path
from logging.handlers import RotatingFileHandler
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init()

class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    COLORS = {
        'DEBUG': Fore.CYAN,
        'INFO': Fore.GREEN,
        'WARNING': Fore.YELLOW,
        'ERROR': Fore.RED,
        'CRITICAL': Fore.RED + Style.BRIGHT
    }
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        levelname = record.levelname
        if levelname in self.COLORS:
            levelname_color = f"{self.COLORS[levelname]}{levelname}{Style.RESET_ALL}"
            record.levelname = levelname_color
        
        return super().format(record)

class ArbitrageLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, name: str = "arbitrage_bot"):
        self.name = name
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.logger.handlers.clear()
        
        self._setup_console_handler()
        self._setup_file_handler()
        self._setup_trade_handler()
        
    def _setup_console_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # –¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_formatter = ColoredFormatter(
            '%(asctime)s | %(levelname)s | %(name)s | %(message)s',
            datefmt='%H:%M:%S'
        )
        console_handler.setFormatter(console_formatter)
        
        self.logger.addHandler(console_handler)
    
    def _setup_file_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        log_file = logs_dir / "arbitrage_bot.log"
        file_handler = RotatingFileHandler(
            log_file,
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
        file_formatter = logging.Formatter(
            '%(asctime)s | %(levelname)-8s | %(name)s | %(funcName)s:%(lineno)d | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        file_handler.setFormatter(file_formatter)
        
        self.logger.addHandler(file_handler)
    
    def _setup_trade_handler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        logs_dir = Path("logs")
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        trade_log_file = logs_dir / "trades.log"
        trade_handler = RotatingFileHandler(
            trade_log_file,
            maxBytes=5*1024*1024,  # 5MB
            backupCount=10,
            encoding='utf-8'
        )
        trade_handler.setLevel(logging.INFO)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        trade_formatter = logging.Formatter(
            '%(asctime)s | TRADE | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        trade_handler.setFormatter(trade_formatter)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.trade_logger = logging.getLogger(f"{self.name}_trades")
        self.trade_logger.setLevel(logging.INFO)
        self.trade_logger.handlers.clear()
        self.trade_logger.addHandler(trade_handler)
        self.trade_logger.addHandler(console_handler := logging.StreamHandler())
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Å–æ–±—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
        console_formatter = ColoredFormatter(
            f'%(asctime)s | {Fore.MAGENTA}TRADE{Style.RESET_ALL} | %(message)s',
            datefmt='%H:%M:%S'
        )
        console_handler.setFormatter(console_formatter)
    
    def get_logger(self) -> logging.Logger:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä"""
        return self.logger
    
    def get_trade_logger(self) -> logging.Logger:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return self.trade_logger
    
    def log_opportunity(self, symbol: str, mexc_price: float, dex_price: float, 
                       spread: float, direction: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        message = (f"üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ | {symbol} | "
                  f"MEXC: ${mexc_price:.4f} | DEX: ${dex_price:.4f} | "
                  f"–°–ø—Ä–µ–¥: {spread:.2f}% | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
        
        self.logger.info(message)
    
    def log_trade_open(self, symbol: str, side: str, size: float, price: float, 
                      spread: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏"""
        message = (f"üìà –û–¢–ö–†–´–¢–ò–ï | {symbol} | {side} | "
                  f"–†–∞–∑–º–µ—Ä: {size} | –¶–µ–Ω–∞: ${price:.4f} | –°–ø—Ä–µ–¥: {spread:.2f}%")
        
        self.trade_logger.info(message)
    
    def log_trade_close(self, symbol: str, side: str, size: float, 
                       open_price: float, close_price: float, pnl: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏"""
        pnl_emoji = "üí∞" if pnl >= 0 else "üí∏"
        message = (f"üìâ –ó–ê–ö–†–´–¢–ò–ï | {symbol} | {side} | "
                  f"–†–∞–∑–º–µ—Ä: {size} | –í—Ö–æ–¥: ${open_price:.4f} | "
                  f"–í—ã—Ö–æ–¥: ${close_price:.4f} | PnL: {pnl_emoji}${pnl:.2f}")
        
        self.trade_logger.info(message)
    
    def log_error(self, error: Exception, context: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        message = f"‚ùå –û–®–ò–ë–ö–ê"
        if context:
            message += f" [{context}]"
        message += f": {str(error)}"
        
        self.logger.error(message, exc_info=True)
    
    def log_performance(self, total_trades: int, winning_trades: int, 
                       total_pnl: float, daily_pnl: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
        
        message = (f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê | –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades} | "
                  f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades} ({win_rate:.1f}%) | "
                  f"–û–±—â–∏–π PnL: ${total_pnl:.2f} | –ó–∞ –¥–µ–Ω—å: ${daily_pnl:.2f}")
        
        self.logger.info(message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
def get_logger(name: str = "arbitrage_bot") -> logging.Logger:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä"""
    if name not in logging.Logger.manager.loggerDict:
        ArbitrageLogger(name)
    
    return logging.getLogger(name)

def get_trade_logger(name: str = "arbitrage_bot") -> logging.Logger:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    if f"{name}_trades" not in logging.Logger.manager.loggerDict:
        ArbitrageLogger(name)
    
    return logging.getLogger(f"{name}_trades")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
main_logger = ArbitrageLogger()
logger = main_logger.get_logger()
trade_logger = main_logger.get_trade_logger()