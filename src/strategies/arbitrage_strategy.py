"""
–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è MEXC Futures vs DEX
–ê–≤—Ç–æ—Ä: 24vasilekk
"""

import asyncio
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass

from ..exchanges.mexc_client import MEXCClient
from ..exchanges.dex_client import DEXClient
from ..utils.logger import get_logger, get_trade_logger
from ..config import config

@dataclass
class ArbitrageOpportunity:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    symbol: str
    mexc_price: float
    dex_price: float
    spread_percent: float
    direction: str  # 'long' –∏–ª–∏ 'short' –Ω–∞ MEXC
    potential_profit: float
    timestamp: datetime

@dataclass
class ActivePosition:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    symbol: str
    side: str
    size: float
    entry_price: float
    entry_spread: float
    entry_time: datetime
    target_spread: float
    stop_loss_price: float
    take_profit_price: float

class ArbitrageStrategy:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –º–µ–∂–¥—É MEXC –∏ DEX"""
    
    def __init__(self):
        self.logger = get_logger("arbitrage_strategy")
        self.trade_logger = get_trade_logger("arbitrage_strategy")
        
        # –ö–ª–∏–µ–Ω—Ç—ã –¥–ª—è –±–∏—Ä–∂
        self.mexc_client = MEXCClient()
        self.dex_client = DEXClient()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.active_positions: Dict[str, ActivePosition] = {}
        self.opportunities_history: List[ArbitrageOpportunity] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.winning_trades = 0
        self.total_pnl = 0.0
        self.daily_pnl = 0.0
        self.daily_trades = 0
        self.last_daily_reset = datetime.now().date()
        
        # –õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        self.daily_loss_limit = config.max_daily_loss
        self.max_positions = config.max_positions
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DEX –∫–ª–∏–µ–Ω—Ç–∞
            await self.dex_client.__aenter__()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            while True:
                await self._monitor_markets()
                await self._manage_positions()
                await self._update_statistics()
                
                # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(config.price_update_interval)
                
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        finally:
            await self._cleanup()
    
    async def _monitor_markets(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–æ–≤ –∏ –ø–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        symbols = config.symbols
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            mexc_prices_task = self.mexc_client.get_multiple_tickers(symbols)
            dex_prices_task = self.dex_client.get_multiple_dex_prices(symbols)
            
            mexc_prices, dex_prices = await asyncio.gather(
                mexc_prices_task, dex_prices_task
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            for symbol in symbols:
                await self._analyze_symbol(symbol, mexc_prices, dex_prices)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–æ–≤: {e}")
    
    async def _analyze_symbol(self, symbol: str, mexc_prices: Dict, dex_prices: Dict):
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        if symbol not in mexc_prices or symbol not in dex_prices:
            return
        
        mexc_data = mexc_prices[symbol]
        dex_data = dex_prices[symbol]
        
        mexc_price = mexc_data['price']
        dex_price = dex_data['price']
        
        # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
        spread_percent = abs(mexc_price - dex_price) / mexc_price * 100
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        if mexc_price < dex_price:
            direction = 'long'  # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ MEXC (–¥–µ—à–µ–≤–ª–µ)
        else:
            direction = 'short'  # –ü—Ä–æ–¥–∞–µ–º –Ω–∞ MEXC (–¥–æ—Ä–æ–∂–µ)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –ª–∏ —Å–ø—Ä–µ–¥
        if spread_percent >= config.min_spread_percent:
            opportunity = ArbitrageOpportunity(
                symbol=symbol,
                mexc_price=mexc_price,
                dex_price=dex_price,
                spread_percent=spread_percent,
                direction=direction,
                potential_profit=spread_percent - 0.5,  # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                timestamp=datetime.now()
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
            self.logger.info(f"üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ | {symbol} | "
                           f"MEXC: ${mexc_price:.4f} | DEX: ${dex_price:.4f} | "
                           f"–°–ø—Ä–µ–¥: {spread_percent:.2f}% | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.opportunities_history.append(opportunity)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
            await self._consider_entry(opportunity)
    
    async def _consider_entry(self, opportunity: ArbitrageOpportunity):
        """–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é"""
        symbol = opportunity.symbol
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
        if not await self._can_open_position(symbol):
            return
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
        if symbol in self.active_positions:
            self.logger.debug(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        if abs(self.daily_pnl) >= self.daily_loss_limit:
            self.logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å: ${abs(self.daily_pnl):.2f}")
            return
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        position_size = await self.mexc_client.calculate_position_size(
            symbol, opportunity.mexc_price, risk_percent=10.0
        )
        
        if position_size <= 0:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}")
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        await self._open_position(opportunity, position_size)
    
    async def _can_open_position(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if len(self.active_positions) >= self.max_positions:
            self.logger.debug(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {self.max_positions}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await self.mexc_client.get_balance()
        available_balance = balance.get('USDT', {}).get('free', 0)
        
        if available_balance < 10:  # –ú–∏–Ω–∏–º—É–º $10
            self.logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞: ${available_balance:.2f}")
            return False
        
        return True
    
    async def _open_position(self, opportunity: ArbitrageOpportunity, size: float):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        symbol = opportunity.symbol
        side = opportunity.direction  # 'long' –∏–ª–∏ 'short'
        
        self.logger.info(f"üìà –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} | {side.upper()} | "
                        f"–†–∞–∑–º–µ—Ä: {size} | –°–ø—Ä–µ–¥: {opportunity.spread_percent:.2f}%")
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ MEXC
            order = await self.mexc_client.create_market_order(
                symbol, 'buy' if side == 'long' else 'sell', size
            )
            
            if not order:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol}")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            entry_price = order['price'] or opportunity.mexc_price
            
            if side == 'long':
                stop_loss_price = entry_price * (1 - config.stop_loss_percent / 100)
                take_profit_price = entry_price * (1 + config.take_profit_percent / 100)
            else:
                stop_loss_price = entry_price * (1 + config.stop_loss_percent / 100)
                take_profit_price = entry_price * (1 - config.take_profit_percent / 100)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            position = ActivePosition(
                symbol=symbol,
                side=side,
                size=size,
                entry_price=entry_price,
                entry_spread=opportunity.spread_percent,
                entry_time=datetime.now(),
                target_spread=config.target_spread_percent,
                stop_loss_price=stop_loss_price,
                take_profit_price=take_profit_price
            )
            
            self.active_positions[symbol] = position
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ
            self.trade_logger.info(f"üìà –û–¢–ö–†–´–¢–ò–ï | {symbol} | {side.upper()} | "
                                 f"–†–∞–∑–º–µ—Ä: {size} | –¶–µ–Ω–∞: ${entry_price:.4f} | "
                                 f"–°–ø—Ä–µ–¥: {opportunity.spread_percent:.2f}%")
            
            self.total_trades += 1
            self.daily_trades += 1
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
    
    async def _manage_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        if not self.active_positions:
            return
        
        symbols_to_close = []
        
        for symbol, position in self.active_positions.items():
            should_close = await self._should_close_position(position)
            
            if should_close:
                symbols_to_close.append(symbol)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        for symbol in symbols_to_close:
            await self._close_position(symbol)
    
    async def _should_close_position(self, position: ActivePosition) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        symbol = position.symbol
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            mexc_ticker = await self.mexc_client.get_ticker(symbol)
            dex_data = await self.dex_client.get_dex_price(symbol)
            
            if not mexc_ticker or not dex_data:
                return False
            
            current_mexc_price = mexc_ticker['price']
            current_dex_price = dex_data['price']
            
            # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ø—Ä–µ–¥–∞
            current_spread = abs(current_mexc_price - current_dex_price) / current_mexc_price * 100
            
            # –£—Å–ª–æ–≤–∏–µ 1: –°–ø—Ä–µ–¥ —Å—É–∑–∏–ª—Å—è –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if current_spread <= position.target_spread:
                self.logger.info(f"üéØ –¶–µ–ª–µ–≤–æ–π —Å–ø—Ä–µ–¥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {symbol}: {current_spread:.2f}%")
                return True
            
            # –£—Å–ª–æ–≤–∏–µ 2: –°—Ç–æ–ø-–ª–æ—Å—Å
            if position.side == 'long' and current_mexc_price <= position.stop_loss_price:
                self.logger.warning(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {symbol}: ${current_mexc_price:.4f}")
                return True
            elif position.side == 'short' and current_mexc_price >= position.stop_loss_price:
                self.logger.warning(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {symbol}: ${current_mexc_price:.4f}")
                return True
            
            # –£—Å–ª–æ–≤–∏–µ 3: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if position.side == 'long' and current_mexc_price >= position.take_profit_price:
                self.logger.info(f"üí∞ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è {symbol}: ${current_mexc_price:.4f}")
                return True
            elif position.side == 'short' and current_mexc_price <= position.take_profit_price:
                self.logger.info(f"üí∞ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è {symbol}: ${current_mexc_price:.4f}")
                return True
            
            # –£—Å–ª–æ–≤–∏–µ 4: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (1 —á–∞—Å)
            max_hold_time = timedelta(hours=1)
            if datetime.now() - position.entry_time > max_hold_time:
                self.logger.warning(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è {symbol}")
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
    
    async def _close_position(self, symbol: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol not in self.active_positions:
            return
        
        position = self.active_positions[symbol]
        
        self.logger.info(f"üìâ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} | {position.side.upper()}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL
            ticker = await self.mexc_client.get_ticker(symbol)
            if not ticker:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}")
                return
            
            current_price = ticker['price']
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ MEXC
            success = await self.mexc_client.close_position(symbol)
            
            if success:
                # –†–∞—Å—á–µ—Ç PnL
                if position.side == 'long':
                    pnl = (current_price - position.entry_price) * position.size
                else:
                    pnl = (position.entry_price - current_price) * position.size
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                fees = position.entry_price * position.size * 0.0004  # 0.04% —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ
                pnl -= fees
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.total_pnl += pnl
                self.daily_pnl += pnl
                
                if pnl > 0:
                    self.winning_trades += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ
                pnl_emoji = "üí∞" if pnl >= 0 else "üí∏"
                self.trade_logger.info(f"üìâ –ó–ê–ö–†–´–¢–ò–ï | {symbol} | {position.side.upper()} | "
                                     f"–†–∞–∑–º–µ—Ä: {position.size} | –í—Ö–æ–¥: ${position.entry_price:.4f} | "
                                     f"–í—ã—Ö–æ–¥: ${current_price:.4f} | PnL: {pnl_emoji}${pnl:.2f}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                del self.active_positions[symbol]
                
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {symbol}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
    
    async def _update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        current_date = datetime.now().date()
        
        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if current_date != self.last_daily_reset:
            self.logger.info(f"üìä –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {self.last_daily_reset}: "
                           f"PnL: ${self.daily_pnl:.2f} | –°–¥–µ–ª–æ–∫: {self.daily_trades}")
            
            self.daily_pnl = 0.0
            self.daily_trades = 0
            self.last_daily_reset = current_date
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        if datetime.now().minute % 10 == 0 and datetime.now().second < 5:
            win_rate = (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0
            
            self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ | –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.total_trades} | "
                           f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.winning_trades} ({win_rate:.1f}%) | "
                           f"–û–±—â–∏–π PnL: ${self.total_pnl:.2f} | –ó–∞ –¥–µ–Ω—å: ${self.daily_pnl:.2f} | "
                           f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(self.active_positions)}")
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if self.active_positions:
            self.logger.info(f"üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ {len(self.active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
            symbols = list(self.active_positions.keys())
            for symbol in symbols:
                await self._close_position(symbol)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.dex_client.close()
        self.mexc_client.close_connection()
        
        self.logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        win_rate = (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0
        
        return {
            'active_positions': len(self.active_positions),
            'total_trades': self.total_trades,
            'winning_trades': self.winning_trades,
            'win_rate': win_rate,
            'total_pnl': self.total_pnl,
            'daily_pnl': self.daily_pnl,
            'daily_trades': self.daily_trades,
            'opportunities_found': len(self.opportunities_history)
        }