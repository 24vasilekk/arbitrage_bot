"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å DEX –±–∏—Ä–∂ –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤
–ê–≤—Ç–æ—Ä: 24vasilekk
–ü—É—Ç—å: src/exchanges/dex_client.py
–û–ë–ù–û–í–õ–ï–ù: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
"""

import aiohttp
import asyncio
from typing import Dict, List, Optional
from datetime import datetime, timedelta

from ..utils.logger import get_logger

class DEXClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å DEX –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self):
        self.logger = get_logger("dex_client")
        self.session = None
        self._price_cache = {}
        self._cache_ttl = 10  # –ö–µ—à –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
        
        # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
        self.coingecko_mapping = {
            # –ù–û–í–´–ï –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ú–û–ù–ï–¢–´
            'DIS/USDT': 'dis-protocol',           # DIS Protocol
            'UPTOP/USDT': 'uptop',                # UPTOP
            'IRIS/USDT': 'iris-network',          # IRISnet
            'DUPE/USDT': 'dupe',                  # DUPE
            'TAG/USDT': 'tag-protocol',           # TAG Protocol
            'STARTUP/USDT': 'startup',            # Startup
            'GOG/USDT': 'guild-of-guardians',     # Guild of Guardians
            'TGT/USDT': 'target',                 # Target
            'AURASOL/USDT': 'aurasol',            # AuraSol
            'DINO/USDT': 'dinoswap',              # DinoSwap
            'ALTCOIN/USDT': 'altcoin',            # AltCoin
            'PEPE/USDT': 'pepe',                  # PEPE (–≤–º–µ—Å—Ç–æ PepeOnTron)
            'ECHO/USDT': 'echo-protocol',         # Echo Protocol
            'MANYU/USDT': 'manyu',                # Manyu
            'APETH/USDT': 'apeth',                # apETH
            'LABUBU/USDT': 'labubu',              # Labubu
            'FART/USDT': 'fartcoin',              # FartBoy/FartCoin
            'ELDE/USDT': 'elde',                  # ELDE
            'GP/USDT': 'gp-token',                # GP Token
            'HOUSE/USDT': 'house',                # House
            'ZEUS/USDT': 'zeus',                  # Zeus (–≤–º–µ—Å—Ç–æ ZeusETH)
            'BR/USDT': 'br-token',                # BR Token
            'VSN/USDT': 'vision-network',         # Vision Network
            'RION/USDT': 'rion',                  # RION
            'DEVVE/USDT': 'devve',                # DEVVE
            
            # –°–¢–ê–ë–ò–õ–¨–ù–´–ï –ú–û–ù–ï–¢–´ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ ID)
            'BTC/USDT': 'bitcoin',
            'ETH/USDT': 'ethereum',
            'BNB/USDT': 'binancecoin',
            'SOL/USDT': 'solana',
            'ADA/USDT': 'cardano',
            'XRP/USDT': 'ripple',
            'DOGE/USDT': 'dogecoin',
            'AVAX/USDT': 'avalanche-2',
            'LINK/USDT': 'chainlink',
            'MATIC/USDT': 'matic-network',
            'UNI/USDT': 'uniswap',
            'LTC/USDT': 'litecoin',
            'ATOM/USDT': 'cosmos',
            'NEAR/USDT': 'near',
            'SHIB/USDT': 'shiba-inu'
        }
    
    async def __aenter__(self):
        """Async context manager –≤—Ö–æ–¥"""
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=15),  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç
            headers={'User-Agent': 'ArbitrageBot/1.0'}
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    def _is_cache_valid(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–µ—à–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if symbol not in self._price_cache:
            return False
            
        cache_time = self._price_cache[symbol].get('timestamp', 0)
        return datetime.now().timestamp() - cache_time < self._cache_ttl
    
    async def _fetch_coingecko_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å CoinGecko"""
        if not self.session:
            return None
            
        coingecko_id = self.coingecko_mapping.get(symbol)
        if not coingecko_id:
            self.logger.debug(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CoinGecko mapping")
            return None
        
        try:
            url = "https://api.coingecko.com/api/v3/simple/price"
            params = {
                'ids': coingecko_id,
                'vs_currencies': 'usd'
            }
            
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    price = data.get(coingecko_id, {}).get('usd')
                    
                    if price:
                        self.logger.debug(f"üîç CoinGecko {symbol}: ${price:.6f}")
                        return float(price)
                elif response.status == 429:
                    self.logger.warning(f"‚ö†Ô∏è CoinGecko rate limit –¥–ª—è {symbol}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è CoinGecko API error {response.status} –¥–ª—è {symbol}")
                    
        except asyncio.TimeoutError:
            self.logger.warning(f"‚è∞ CoinGecko timeout –¥–ª—è {symbol}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ CoinGecko –¥–ª—è {symbol}: {e}")
        
        return None
    
    async def _fetch_binance_spot_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Binance Spot –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not self.session:
            return None
            
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è Binance API
            binance_symbol = symbol.replace('/', '').upper()
            
            url = "https://api.binance.com/api/v3/ticker/price"
            params = {'symbol': binance_symbol}
            
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    price = data.get('price')
                    
                    if price:
                        price = float(price)
                        self.logger.debug(f"üîç Binance Spot {symbol}: ${price:.6f}")
                        return price
                elif response.status == 400:
                    # –°–∏–º–≤–æ–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ Binance - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    self.logger.debug(f"‚ö†Ô∏è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Binance")
                else:
                    self.logger.warning(f"‚ö†Ô∏è Binance API error {response.status} –¥–ª—è {symbol}")
                    
        except asyncio.TimeoutError:
            self.logger.warning(f"‚è∞ Binance timeout –¥–ª—è {symbol}")
        except Exception as e:
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ Binance –¥–ª—è {symbol}: {e}")
        
        return None
    
    async def _fetch_dexscreener_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã —Å DexScreener (—Ä–µ–∞–ª—å–Ω—ã–µ DEX –¥–∞–Ω–Ω—ã–µ)"""
        if not self.session:
            return None
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–Ω–µ—Ç—É –∏–∑ —Å–∏–º–≤–æ–ª–∞
            base_token = symbol.split('/')[0].upper()
            
            # –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É —Ç–æ–∫–µ–Ω–∞
            url = f"https://api.dexscreener.com/latest/dex/search"
            params = {'q': base_token}
            
            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    pairs = data.get('pairs', [])
                    
                    if pairs:
                        # –ë–µ—Ä–µ–º –ø–∞—Ä—ã —Å USDT/USDC –∏ —Ö–æ—Ä–æ—à–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
                        stable_pairs = []
                        for pair in pairs:
                            quote_symbol = pair.get('quoteToken', {}).get('symbol', '').upper()
                            base_symbol = pair.get('baseToken', {}).get('symbol', '').upper()
                            liquidity = pair.get('liquidity', {}).get('usd', 0)
                            
                            if (quote_symbol in ['USDT', 'USDC'] and 
                                base_symbol == base_token and 
                                liquidity > 50000):  # –ú–∏–Ω–∏–º—É–º $50k –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                                stable_pairs.append(pair)
                        
                        if stable_pairs:
                            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —Ç–æ–ø-5 –ø–∞—Ä–∞–º
                            top_pairs = sorted(stable_pairs, 
                                             key=lambda x: x.get('liquidity', {}).get('usd', 0),
                                             reverse=True)[:5]
                            
                            prices = []
                            for pair in top_pairs:
                                price = pair.get('priceUsd')
                                if price:
                                    prices.append(float(price))
                            
                            if prices:
                                avg_price = sum(prices) / len(prices)
                                self.logger.debug(f"üîç DexScreener {symbol}: ${avg_price:.6f} "
                                               f"(–∏–∑ {len(prices)} –ø–∞—Ä)")
                                return avg_price
                elif response.status == 429:
                    self.logger.warning(f"‚ö†Ô∏è DexScreener rate limit –¥–ª—è {symbol}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è DexScreener API error {response.status} –¥–ª—è {symbol}")
                    
        except asyncio.TimeoutError:
            self.logger.warning(f"‚è∞ DexScreener timeout –¥–ª—è {symbol}")
        except Exception as e:
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ DexScreener –¥–ª—è {symbol}: {e}")
        
        return None
    
    async def _fetch_dexscreener_by_name(self, symbol: str) -> Optional[float]:
        """
        Fallback –º–µ—Ç–æ–¥: –ø–æ–∏—Å–∫ —Ü–µ–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–∫–µ–Ω–∞ –≤ DexScreener
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ CoinGecko
        """
        if not self.session:
            return None
            
        try:
            base_token = symbol.split('/')[0].upper()
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_terms = [
                base_token,
                base_token.lower(),
                f"${base_token}",
            ]
            
            for term in search_terms:
                url = f"https://api.dexscreener.com/latest/dex/search"
                params = {'q': term}
                
                try:
                    async with self.session.get(url, params=params) as response:
                        if response.status == 200:
                            data = await response.json()
                            pairs = data.get('pairs', [])
                            
                            # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                            exact_matches = []
                            for pair in pairs:
                                base_symbol = pair.get('baseToken', {}).get('symbol', '').upper()
                                quote_symbol = pair.get('quoteToken', {}).get('symbol', '').upper()
                                liquidity = pair.get('liquidity', {}).get('usd', 0)
                                
                                if (base_symbol == base_token and 
                                    quote_symbol in ['USDT', 'USDC'] and 
                                    liquidity > 10000):  # –ú–∏–Ω–∏–º—É–º $10k –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                                    exact_matches.append(pair)
                            
                            if exact_matches:
                                # –ë–µ—Ä–µ–º –ø–∞—Ä—É —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
                                best_pair = max(exact_matches, 
                                              key=lambda x: x.get('liquidity', {}).get('usd', 0))
                                price = best_pair.get('priceUsd')
                                
                                if price:
                                    price = float(price)
                                    self.logger.info(f"üéØ DexScreener fallback {symbol}: ${price:.6f}")
                                    return price
                        
                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await asyncio.sleep(0.5)
                        
                except Exception as e:
                    continue
                        
        except Exception as e:
            self.logger.debug(f"‚ùå DexScreener fallback –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
        
        return None
    
    async def get_dex_price(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã DEX —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if self._is_cache_valid(symbol):
            cached_data = self._price_cache[symbol]
            self.logger.debug(f"üíæ –ö–µ—à {symbol}: ${cached_data['price']:.6f}")
            return cached_data
        
        if not self.session:
            await self.__aenter__()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            self._fetch_coingecko_price(symbol),
            self._fetch_binance_spot_price(symbol),
            self._fetch_dexscreener_price(symbol)
        ]
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            prices = await asyncio.wait_for(
                asyncio.gather(*tasks, return_exceptions=True),
                timeout=12.0
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            valid_prices = []
            sources = []
            
            for i, price in enumerate(prices):
                if isinstance(price, (int, float)) and price > 0:
                    valid_prices.append(price)
                    sources.append(['CoinGecko', 'Binance', 'DexScreener'][i])
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º fallback
            if not valid_prices:
                self.logger.debug(f"üîÑ –ü—Ä–æ–±—É–µ–º fallback –¥–ª—è {symbol}")
                fallback_price = await self._fetch_dexscreener_by_name(symbol)
                if fallback_price:
                    valid_prices.append(fallback_price)
                    sources.append('DexScreener-Fallback')
            
            if not valid_prices:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                return None
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Å—Ä–µ–¥–Ω—é—é
            if len(valid_prices) == 1:
                final_price = valid_prices[0]
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å CoinGecko - –¥–∞–µ–º –µ–º—É –±–æ–ª—å—à–∏–π –≤–µ—Å
                weights = []
                for source in sources:
                    if 'CoinGecko' in source:
                        weights.append(0.5)
                    elif 'Binance' in source:
                        weights.append(0.3)
                    else:
                        weights.append(0.2)
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
                total_weight = sum(weights)
                weights = [w / total_weight for w in weights]
                
                final_price = sum(p * w for p, w in zip(valid_prices, weights))
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'symbol': symbol,
                'price': final_price,
                'sources': sources,
                'source_count': len(valid_prices),
                'timestamp': datetime.now().timestamp()
            }
            
            self._price_cache[symbol] = result
            
            self.logger.debug(f"üí± DEX —Ü–µ–Ω–∞ {symbol}: ${final_price:.6f} "
                            f"(–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(valid_prices)}: {', '.join(sources)})")
            
            return result
            
        except asyncio.TimeoutError:
            self.logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DEX —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return None
    
    async def get_multiple_dex_prices(self, symbols: List[str]) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        if not self.session:
            await self.__aenter__()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        semaphore = asyncio.Semaphore(5)
        
        async def get_price_with_semaphore(symbol):
            async with semaphore:
                return symbol, await self.get_dex_price(symbol)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        tasks = [get_price_with_semaphore(symbol) for symbol in symbols]
        
        try:
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            prices = {}
            successful = 0
            
            for result in results:
                if isinstance(result, tuple) and len(result) == 2:
                    symbol, price_data = result
                    if isinstance(price_data, dict) and not isinstance(price_data, Exception):
                        prices[symbol] = price_data
                        successful += 1
                    else:
                        self.logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                elif isinstance(result, Exception):
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {result}")
            
            self.logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ DEX —Ü–µ–Ω: {successful}/{len(symbols)}")
            return prices
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö DEX —Ü–µ–Ω: {e}")
            return {}
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Ü–µ–Ω"""
        self._price_cache.clear()
        self.logger.debug("üßπ –ö–µ—à DEX —Ü–µ–Ω –æ—á–∏—â–µ–Ω")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.session:
            await self.session.close()
            self.logger.info("üîå DEX –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
    
    async def check_token_availability(self, symbols: List[str]) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö"""
        self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {len(symbols)} —Ç–æ–∫–µ–Ω–æ–≤...")
        
        availability = {}
        
        for symbol in symbols:
            self.logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º {symbol}...")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É
            price_data = await self.get_dex_price(symbol)
            
            if price_data and price_data.get('price', 0) > 0:
                availability[symbol] = True
                sources = price_data.get('sources', [])
                self.logger.info(f"‚úÖ {symbol}: –¥–æ—Å—Ç—É–ø–µ–Ω (–∏—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sources)})")
            else:
                availability[symbol] = False
                self.logger.warning(f"‚ùå {symbol}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await asyncio.sleep(1)
        
        available_count = sum(availability.values())
        self.logger.info(f"üìä –ò—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {available_count}/{len(symbols)} —Ç–æ–∫–µ–Ω–æ–≤")
        
        return availability