"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MEXC Futures API
–ê–≤—Ç–æ—Ä: 24vasilekk
–û–ë–ù–û–í–õ–ï–ù: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–ª–µ—á–∞, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
"""

import ccxt
import asyncio
from typing import Dict, List, Optional, Tuple
from decimal import Decimal
from datetime import datetime, timedelta

from ..utils.logger import get_logger
from ..config import config

class MEXCClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ MEXC Futures —Å –ê–ì–†–ï–°–°–ò–í–ù–´–ú–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    def __init__(self):
        self.logger = get_logger("mexc_client")
        self.exchange = None
        self._positions = {}
        self._balance = {}
        self._last_balance_update = None
        
        self._initialize_exchange()
    
    def _initialize_exchange(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MEXC —Å –ø–ª–µ—á–æ–º"""
        try:
            self.exchange = ccxt.mexc({
                'apiKey': config.mexc_api_key,
                'secret': config.mexc_secret,
                'sandbox': config.test_mode,  # –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å –≤ —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–µ
                'enableRateLimit': True,
                'options': {
                    'defaultType': 'swap',  # –§—å—é—á–µ—Ä—Å—ã
                    'adjustForTimeDifference': True,
                    'defaultLeverage': config.leverage  # –ü–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }
            })
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤
            self.exchange.load_markets()
            self.logger.info(f"‚úÖ MEXC –ø–æ–¥–∫–ª—é—á–µ–Ω. –†—ã–Ω–∫–æ–≤: {len(self.exchange.markets)} | –ü–ª–µ—á–æ: {config.leverage}x")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MEXC: {e}")
            raise
    
    async def set_leverage(self, symbol: str, leverage: int = None) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if leverage is None:
            leverage = config.leverage
            
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            result = self.exchange.set_leverage(leverage, symbol)
            self.logger.info(f"‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ {leverage}x –¥–ª—è {symbol}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è {symbol}: {e}")
            return False
    
    async def get_ticker(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            ticker = self.exchange.fetch_ticker(symbol)
            return {
                'symbol': symbol,
                'price': float(ticker['last']),
                'bid': float(ticker['bid']) if ticker['bid'] else None,
                'ask': float(ticker['ask']) if ticker['ask'] else None,
                'timestamp': ticker['timestamp']
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
            return None
    
    async def get_multiple_tickers(self, symbols: List[str]) -> Dict[str, Dict]:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        tickers = {}
        
        try:
            # MEXC –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            all_tickers = self.exchange.fetch_tickers(symbols)
            
            for symbol, ticker in all_tickers.items():
                if symbol in symbols:
                    tickers[symbol] = {
                        'symbol': symbol,
                        'price': float(ticker['last']),
                        'bid': float(ticker['bid']) if ticker['bid'] else None,
                        'ask': float(ticker['ask']) if ticker['ask'] else None,
                        'timestamp': ticker['timestamp']
                    }
            
            self.logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
        
        return tickers
    
    async def get_balance(self, force_update: bool = False) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        now = datetime.now()
        
        # –ö–µ—à–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if (not force_update and self._balance and self._last_balance_update and 
            now - self._last_balance_update < timedelta(seconds=10)):
            return self._balance
        
        try:
            balance = self.exchange.fetch_balance()
            self._balance = {
                'USDT': {
                    'free': float(balance['USDT']['free'] or 0),
                    'used': float(balance['USDT']['used'] or 0),
                    'total': float(balance['USDT']['total'] or 0)
                }
            }
            self._last_balance_update = now
            
            self.logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${self._balance['USDT']['total']:.2f}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            
        return self._balance
    
    async def get_positions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            positions = self.exchange.fetch_positions()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            open_positions = []
            for position in positions:
                if position['contracts'] != 0:
                    open_positions.append({
                        'symbol': position['symbol'],
                        'side': position['side'],
                        'size': float(position['contracts']),
                        'entry_price': float(position['entryPrice']),
                        'mark_price': float(position['markPrice']),
                        'unrealized_pnl': float(position['unrealizedPnl']),
                        'percentage': float(position['percentage']),
                        'timestamp': position['timestamp'],
                        'leverage': position.get('leverage', config.leverage)
                    })
            
            self.logger.debug(f"üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}")
            return open_positions
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    async def create_market_order(self, symbol: str, side: str, amount: float, 
                                 test_mode: bool = None) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å –ø–ª–µ—á–æ–º"""
        if test_mode is None:
            test_mode = config.test_mode
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
        if not test_mode:
            await self.set_leverage(symbol, config.leverage)
        
        if test_mode:
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–µ
            ticker = await self.get_ticker(symbol)
            if not ticker:
                return None
                
            return {
                'id': f"test_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                'symbol': symbol,
                'side': side,
                'amount': amount,
                'price': ticker['price'],
                'status': 'closed',
                'timestamp': datetime.now().timestamp() * 1000,
                'test_mode': True,
                'leverage': config.leverage
            }
        
        try:
            # –†–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä —Å –ø–ª–µ—á–æ–º
            order = self.exchange.create_market_order(
                symbol, side, amount,
                params={'leverage': config.leverage}
            )
            
            self.logger.info(f"üìà –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order['id']} | {symbol} | {side} | "
                           f"{amount:.8f} | –ü–ª–µ—á–æ: {config.leverage}x")
            
            return {
                'id': order['id'],
                'symbol': order['symbol'],
                'side': order['side'],
                'amount': float(order['amount']),
                'price': float(order['price']) if order['price'] else None,
                'status': order['status'],
                'timestamp': order['timestamp'],
                'test_mode': False,
                'leverage': config.leverage
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    async def close_position(self, symbol: str, test_mode: bool = None) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        if test_mode is None:
            test_mode = config.test_mode
            
        try:
            positions = await self.get_positions()
            position = next((p for p in positions if p['symbol'] == symbol), None)
            
            if not position:
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = 'sell' if position['side'] == 'long' else 'buy'
            size = abs(position['size'])
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
            order = await self.create_market_order(symbol, close_side, size, test_mode)
            
            if order:
                self.logger.info(f"üìâ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞: {order['id']} | "
                               f"–ü–ª–µ—á–æ: {config.leverage}x")
                return True
            else:
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return False
    
    def calculate_fixed_position_size(self, symbol: str, price: float) -> float:
        """–†–∞—Å—á–µ—Ç –§–ò–ö–°–ò–†–û–í–ê–ù–ù–û–ì–û —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT
            fixed_size_usd = config.fixed_position_size  # $5.10
            
            # –†–∞–∑–º–µ—Ä –≤ –º–æ–Ω–µ—Ç–∞—Ö
            position_size = fixed_size_usd / price
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
            if position_size > 1:
                position_size = round(position_size, 6)
            else:
                position_size = round(position_size, 8)
            
            self.logger.debug(f"üí± –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {position_size:.8f} "
                            f"(${fixed_size_usd} –ø—Ä–∏ —Ü–µ–Ω–µ ${price:.8f}) | –ü–ª–µ—á–æ: {config.leverage}x")
            
            return position_size
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0
    
    async def get_trading_fees(self, symbol: str) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            market = self.exchange.markets.get(symbol, {})
            return {
                'maker': market.get('maker', 0.0002),  # 0.02% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'taker': market.get('taker', 0.0002)   # 0.02% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π: {e}")
            return {'maker': 0.0002, 'taker': 0.0002}
    
    async def set_margin_mode(self, symbol: str, margin_mode: str = 'isolated') -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –º–∞—Ä–∂–∏"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–∞—Ä–∂—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            result = self.exchange.set_margin_mode(margin_mode, symbol)
            self.logger.info(f"üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏ {margin_mode} –¥–ª—è {symbol}")
            return True
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏ –¥–ª—è {symbol}: {e}")
            return False
    
    def close_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.exchange:
            self.exchange.close()
            self.logger.info("üîå MEXC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.close_connection()