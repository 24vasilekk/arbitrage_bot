"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ MEXC –∏ DEX –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
–ê–≤—Ç–æ—Ä: 24vasilekk  
–ü—É—Ç—å: test_connections.py (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
–û–ë–ù–û–í–õ–ï–ù: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
"""

import asyncio
import ccxt
import aiohttp
import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from colorama import init, Fore, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

load_dotenv()

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã - –º–∏–∫—Å —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∏ –Ω–æ–≤—ã—Ö
TEST_TOKENS = [
    "BTC/USDT",    # –°—Ç–∞–±–∏–ª—å–Ω—ã–π
    "ETH/USDT",    # –°—Ç–∞–±–∏–ª—å–Ω—ã–π  
    "PEPE/USDT",   # –ù–æ–≤—ã–π
    "DINO/USDT",   # –ù–æ–≤—ã–π
    "GOG/USDT"     # –ù–æ–≤—ã–π
]

async def test_mexc():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MEXC Futures"""
    print(f"{Fore.YELLOW}üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MEXC Futures...{Style.RESET_ALL}")
    
    mexc = None
    try:
        mexc = ccxt.mexc({
            'apiKey': os.getenv('MEXC_API_KEY'),
            'secret': os.getenv('MEXC_SECRET'),
            'sandbox': True,  # –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å
            'enableRateLimit': True,
            'options': {'defaultType': 'swap'}  # –§—å—é—á–µ—Ä—Å—ã
        })
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤
        print("  üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏...")
        markets = mexc.load_markets()
        print(f"  {Fore.GREEN}‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(markets)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä{Style.RESET_ALL}")
        
        # –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞
        print("  üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...")
        balance = mexc.fetch_balance()
        usdt_balance = balance.get('USDT', {}).get('free', 0)
        total_balance = balance.get('USDT', {}).get('total', 0)
        print(f"  {Fore.GREEN}‚úÖ –ë–∞–ª–∞–Ω—Å USDT: —Å–≤–æ–±–æ–¥–Ω–æ ${usdt_balance:.2f}, –≤—Å–µ–≥–æ ${total_balance:.2f}{Style.RESET_ALL}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –Ω–∞—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
        print("  üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω...")
        available_tokens = []
        for token in TEST_TOKENS:
            try:
                if token in markets:
                    ticker = mexc.fetch_ticker(token)
                    price = ticker['last']
                    print(f"    {Fore.GREEN}‚úÖ{Style.RESET_ALL} {token:<12} ${price:>12,.4f}")
                    available_tokens.append(token)
                else:
                    print(f"    {Fore.RED}‚ùå{Style.RESET_ALL} {token:<12} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ MEXC")
            except Exception as e:
                print(f"    {Fore.RED}‚ùå{Style.RESET_ALL} {token:<12} –æ—à–∏–±–∫–∞: {str(e)[:30]}...")
        
        # –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–π
        print("  üìç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏...")
        positions = mexc.fetch_positions()
        open_positions = [p for p in positions if p['contracts'] != 0]
        print(f"  {Fore.GREEN}‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}{Style.RESET_ALL}")
        
        if open_positions:
            print("  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
            for pos in open_positions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                symbol = pos['symbol']
                side = pos['side']
                size = pos['contracts']
                pnl = pos['unrealizedPnl']
                print(f"    üìä {symbol} {side} {size} (PnL: ${pnl:.2f})")
        
        print(f"  {Fore.GREEN}‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(available_tokens)}/{len(TEST_TOKENS)}{Style.RESET_ALL}")
        return True
        
    except ccxt.AuthenticationError:
        print(f"  {Fore.RED}‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ MEXC{Style.RESET_ALL}")
        print(f"  {Fore.YELLOW}üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ{Style.RESET_ALL}")
        return False
    except ccxt.NetworkError as e:
        print(f"  {Fore.RED}‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ MEXC: {e}{Style.RESET_ALL}")
        return False
    except Exception as e:
        print(f"  {Fore.RED}‚ùå –û—à–∏–±–∫–∞ MEXC: {e}{Style.RESET_ALL}")
        print(f"  {Fore.YELLOW}üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:{Style.RESET_ALL}")
        print("    1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –≤ .env")
        print("    2. –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã")  
        print("    3. IP –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
        return False
        
    finally:
        if mexc:
            mexc.close()

async def test_dex_sources():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DEX –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ü–µ–Ω"""
    print(f"\n{Fore.YELLOW}üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DEX –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...{Style.RESET_ALL}")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à DEX –∫–ª–∏–µ–Ω—Ç
    try:
        from src.exchanges.dex_client import DEXClient
        
        print("  üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DEX –∫–ª–∏–µ–Ω—Ç...")
        async with DEXClient() as dex_client:
            successful_tokens = 0
            
            for token in TEST_TOKENS:
                print(f"  üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {token}...", end="")
                
                try:
                    price_data = await dex_client.get_dex_price(token)
                    
                    if price_data and price_data.get('price', 0) > 0:
                        price = price_data['price']
                        sources = price_data.get('sources', [])
                        print(f" {Fore.GREEN}‚úÖ ${price:.4f} ({len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {', '.join(sources)}){Style.RESET_ALL}")
                        successful_tokens += 1
                    else:
                        print(f" {Fore.RED}‚ùå —Ü–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞{Style.RESET_ALL}")
                        
                except Exception as e:
                    print(f" {Fore.RED}‚ùå –æ—à–∏–±–∫–∞: {str(e)[:30]}...{Style.RESET_ALL}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
            
            print(f"  {Fore.GREEN}‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã: {successful_tokens}/{len(TEST_TOKENS)}{Style.RESET_ALL}")
            
            return successful_tokens >= len(TEST_TOKENS) // 2  # –ú–∏–Ω–∏–º—É–º 50% —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        
    except ImportError:
        print(f"  {Fore.YELLOW}‚ö†Ô∏è DEX –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ API –∑–∞–ø—Ä–æ—Å—ã{Style.RESET_ALL}")
        
        # Fallback - –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API
        return await test_dex_direct()
    except Exception as e:
        print(f"  {Fore.RED}‚ùå –û—à–∏–±–∫–∞ DEX –∫–ª–∏–µ–Ω—Ç–∞: {e}{Style.RESET_ALL}")
        return False

async def test_dex_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DEX API –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞"""
    async with aiohttp.ClientSession() as session:
        success_count = 0
        
        # –¢–µ—Å—Ç CoinGecko
        try:
            print("    üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º CoinGecko...")
            url = "https://api.coingecko.com/api/v3/simple/price"
            params = {"ids": "bitcoin,ethereum,pepe", "vs_currencies": "usd"}
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    btc_price = data.get('bitcoin', {}).get('usd', 'N/A')
                    eth_price = data.get('ethereum', {}).get('usd', 'N/A')
                    pepe_price = data.get('pepe', {}).get('usd', 'N/A')
                    
                    print(f"      {Fore.GREEN}‚úÖ CoinGecko –ø–æ–¥–∫–ª—é—á–µ–Ω:{Style.RESET_ALL}")
                    print(f"         BTC: ${btc_price:,}")
                    print(f"         ETH: ${eth_price:,}")  
                    print(f"         PEPE: ${pepe_price}")
                    success_count += 1
                else:
                    print(f"      {Fore.RED}‚ùå CoinGecko: HTTP {response.status}{Style.RESET_ALL}")
                    
        except Exception as e:
            print(f"      {Fore.RED}‚ùå CoinGecko –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        
        # –¢–µ—Å—Ç DexScreener
        try:
            print("    üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º DexScreener...")
            url = "https://api.dexscreener.com/latest/dex/search"
            params = {"q": "PEPE"}
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    pairs_count = len(data.get('pairs', []))
                    print(f"      {Fore.GREEN}‚úÖ DexScreener –ø–æ–¥–∫–ª—é—á–µ–Ω: {pairs_count} –ø–∞—Ä –Ω–∞–π–¥–µ–Ω–æ{Style.RESET_ALL}")
                    success_count += 1
                else:
                    print(f"      {Fore.RED}‚ùå DexScreener: HTTP {response.status}{Style.RESET_ALL}")
                    
        except Exception as e:
            print(f"      {Fore.RED}‚ùå DexScreener –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        
        # –¢–µ—Å—Ç Binance –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        try:
            print("    üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Binance API...")
            url = "https://api.binance.com/api/v3/ticker/price"
            params = {"symbols": '["BTCUSDT","ETHUSDT","PEPEUSDT"]'}
            
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"      {Fore.GREEN}‚úÖ Binance API –ø–æ–¥–∫–ª—é—á–µ–Ω:{Style.RESET_ALL}")
                    for item in data:
                        symbol = item['symbol']
                        price = float(item['price'])
                        print(f"         {symbol}: ${price:,.6f}")
                    success_count += 1
                else:
                    print(f"      {Fore.RED}‚ùå Binance API: HTTP {response.status}{Style.RESET_ALL}")
                    
        except Exception as e:
            print(f"      {Fore.RED}‚ùå Binance API –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
            
        return success_count >= 2  # –ú–∏–Ω–∏–º—É–º 2 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å

async def test_arbitrage_simulation():
    """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏"""
    print(f"\n{Fore.YELLOW}üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏...{Style.RESET_ALL}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ü–µ–Ω —Å —Ä–∞–∑–Ω—ã–º —Å–ø—Ä–µ–¥–æ–º
    test_cases = [
        ("BTC/USDT", 45000.0, 48500.0, "–±–æ–ª—å—à–æ–π —Å–ø—Ä–µ–¥"),
        ("ETH/USDT", 3200.0, 3230.0, "–º–∞–ª–µ–Ω—å–∫–∏–π —Å–ø—Ä–µ–¥"),
        ("PEPE/USDT", 0.00001234, 0.00001345, "–º–∏–∫—Ä–æ-—Ç–æ–∫–µ–Ω"),
    ]
    
    min_spread = float(os.getenv('MIN_SPREAD_PERCENT', 7.5))
    
    print(f"  üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {min_spread}%")
    
    opportunities_found = 0
    
    for symbol, mexc_price, dex_price, description in test_cases:
        # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
        spread_percent = abs(mexc_price - dex_price) / mexc_price * 100
        direction = "LONG –Ω–∞ MEXC" if mexc_price < dex_price else "SHORT –Ω–∞ MEXC"
        
        print(f"\n  üìä –°–∏–º—É–ª—è—Ü–∏—è {symbol} ({description}):")
        print(f"     MEXC: ${mexc_price:,.6f}")
        print(f"     DEX:  ${dex_price:,.6f}")
        print(f"     –°–ø—Ä–µ–¥: {spread_percent:.2f}%")
        
        if spread_percent >= min_spread:
            opportunities_found += 1
            potential_profit = spread_percent - 0.5  # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
            print(f"     {Fore.GREEN}‚úÖ –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨!{Style.RESET_ALL}")
            print(f"     üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}")
            print(f"     üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ~{potential_profit:.1f}%")
        else:
            print(f"     {Fore.YELLOW}‚ö†Ô∏è –°–ø—Ä–µ–¥ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω ({spread_percent:.2f}% < {min_spread}%){Style.RESET_ALL}")
    
    print(f"\n  {Fore.CYAN}üìà –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {opportunities_found}/{len(test_cases)}{Style.RESET_ALL}")
    
    return True

async def test_all_connections():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print(f"{Fore.CYAN}üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    print("–ê–≤—Ç–æ—Ä: 24vasilekk")
    print("Email: 24vasilekk@gmail.com")  
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print(f"{Fore.YELLOW}üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...{Style.RESET_ALL}")
    
    if not os.getenv('MEXC_API_KEY'):
        print(f"{Fore.RED}‚ùå MEXC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}üí° –°–æ–∑–¥–∞–π—Ç–µ .env –∏–∑ .env.example –∏ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏{Style.RESET_ALL}")
        return False
    
    if not os.getenv('MEXC_SECRET'):
        print(f"{Fore.RED}‚ùå MEXC_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ{Style.RESET_ALL}")
        return False
    
    print(f"{Fore.GREEN}‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã{Style.RESET_ALL}")
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    results = []
    
    # –¢–µ—Å—Ç 1: MEXC
    mexc_ok = await test_mexc()
    results.append(("MEXC Futures", mexc_ok))
    
    # –¢–µ—Å—Ç 2: DEX –∏—Å—Ç–æ—á–Ω–∏–∫–∏  
    dex_ok = await test_dex_sources()
    results.append(("DEX –∏—Å—Ç–æ—á–Ω–∏–∫–∏", dex_ok))
    
    # –¢–µ—Å—Ç 3: –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
    arbitrage_ok = await test_arbitrage_simulation()
    results.append(("–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞", arbitrage_ok))
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n{Fore.CYAN}=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    all_passed = True
    for test_name, result in results:
        status = f"{Fore.GREEN}‚úÖ –ü–†–û–®–ï–õ{Style.RESET_ALL}" if result else f"{Fore.RED}‚ùå –ü–†–û–í–ê–õ–ï–ù{Style.RESET_ALL}"
        print(f"  {test_name:<20} {status}")
        if not result:
            all_passed = False
    
    print("=" * 60)
    
    if all_passed:
        print(f"{Fore.GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!{Style.RESET_ALL}")
        print(f"{Fore.GREEN}‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ{Style.RESET_ALL}")
        print(f"\n{Fore.YELLOW}üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:{Style.RESET_ALL}")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã: python check_new_tokens.py")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–µ: python run.py --test-mode")
        print("3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/arbitrage_bot.log")
        return True
    else:
        print(f"{Fore.RED}‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò{Style.RESET_ALL}")
        print(f"\n{Fore.YELLOW}üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:{Style.RESET_ALL}")
        
        if not mexc_ok:
            print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MEXC API –∫–ª—é—á–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤")
            print("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ IP –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫")
        
        if not dex_ok:
            print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å DEX API")
            print("‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
        
        print(f"\n{Fore.CYAN}üí° –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ —Å --skip-tests{Style.RESET_ALL}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    try:
        result = await test_all_connections()
        exit_code = 0 if result else 1
        exit(exit_code)
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Style.RESET_ALL}")
        exit(1)
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}{Style.RESET_ALL}")
        exit(1)

if __name__ == "__main__":
    asyncio.run(main())